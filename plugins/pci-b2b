#!/bin/bash
svn="$(which svn)"
sed="$(which sed)"
grep="$(which grep)"
dialog="$(which dialog)"
basename=$(which basename)

# Echo to error file descriptor
function echoerr() {
	echo $@ >&2
}

function goToBaseDir() {
	while [ ! -f "scripts/b2b-utils" ] && [ `pwd` != "/" ]; do
		cd ..
	done
	if [ `pwd` == "/" ]; then
		echo "Não foi possível encontrar diretório base."
		echo "Execute o comando dentro de um diretório na estrutura de b2b."
		exit 1
	fi
}

goToBaseDir

if [ "$dialog" == "" ]; then
	echoerr "Erro: dependência de aplicativo não encontrado.
Instale 'dialog' para poder utilizar essa funcionalidade."
	exit 1
fi
changes=$(./scripts/b2b-utils -a status | "$sed" 's/^\( M\|[MADR!?]\).\{5,6\}\s\(.*\)$/- (\1) \2\n/' | "$sed" '/^[^-]\|^$/d' | "$sed" 's/^-\s//')
pwd=$(pwd)'/'
pwd=$(echo "$pwd" | "$sed" 's/\//\\\//g')
# Se está no menu (escolha de marcar/desmarcar todos)
inmenu=1
# Label para o botão de marcar/desmarcar todos
checkUncheckLabel="Marcar todos"
# Flag de seleção para as opções
flag="off"
tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/pcitmp
while [ $inmenu -eq 1 ]; do
	options=""
	IFS="
"
	for c in $changes; do
		c=$(echo "$c" | "$sed" 's/'$pwd'//')
		options="$options \"$c\" \"\" $flag"
	done
	unset IFS
	# Sem arquivos para comitar
	if [ "$options" == "" ]; then
		exit 0
	fi

	# Configuração para que dialog possa ser executado em subcontextos
	exec 3>&1
	# Execução do comando de dialog
	eval $dialog --title "\"SVNU Pre-commit\"" --extra-button --extra-label "\"$checkUncheckLabel\"" --checklist "\"Arquivos\"" 500 500 50 $options 2> $tempfile
	retval=$?

	if [ ! $retval -eq 3 ]; then
		inmenu=0
	fi


	if [ "$flag" == "off" ]; then
		checkUncheckLabel="Desmarcar todos"
		flag="on"
	else
		checkUncheckLabel="Marcar todos"
		flag="off"
	fi
done
selected=$(cat $tempfile)
rm $tempfile
clear
# Configuração para que dialog possa ser executado em subcontextos
exec 3>&-
# Cancel or ESC key pressed (xargs info)
if [ "$selected" == "" ] || [ "${selected:0:6}" == "xargs:" ]; then
	exit 0
fi
IFS='"'
files=""
commands=""
for s in $selected; do
	# Trim
	s=$(echo $s | "$sed" 's/^\s*\(.*\)\s*$/\1/')
	# Correção em nomes de arquivos com arroba (ambiguidade com o arroba de designação de revisão)
	contains_at=$(echo $s | "$grep" '@')
	if [ "$contains_at" != "" ]; then
		s="$s@"
	fi
	# Remove char escaping
	s=$(eval "echo $s")
	if [ "$s" != "" ]; then
		# Get file status flag
		flag=$(echo $s | "$sed" 's/^(\(.*\)).*$/\1/')
		# Get file
		file=$(echo $s | "$sed" 's/^(.*)\s\(.*\)$/\1/')
		if [ "$flag" == "?" ]; then
			c=$("$basename" "$svn")" add \"$file\""
			commands="$commands $c;"
			unset IFS
			echo $c
			IFS='"'
		elif [ "$flag" == "!" ]; then
			c=$("$basename" "$svn")" remove \"$file\""
			commands="$commands $c;"
			unset IFS
			echo $c
			IFS='"'
		fi
		files="$files \"$file\""
	fi
done
unset IFS
c="svnu commit $files"
commands="$commands $c"
echo $c
echo "------------------------------------"
echo -n "Executar os comandos gerados? [s/N]: "
read answer
if [ "$answer" == "s" ] || [ "$answer" == "S" ]; then
	pwd
	eval $commands
fi
